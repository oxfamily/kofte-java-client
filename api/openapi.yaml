openapi: 3.1.0
info:
  description: Köfte Api V1
  license:
    name: ""
  title: Köfte
  version: "0.2"
servers:
- url: /
paths:
  /api/v1/template:
    post:
      operationId: upsert
      parameters:
      - explode: true
        in: query
        name: _id
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: title
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: description
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: templateType
        required: true
        schema:
          $ref: '#/components/schemas/TemplateType'
        style: form
      - explode: true
        in: query
        name: templateContext
        required: true
        schema:
          $ref: '#/components/schemas/Context'
        style: form
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/upsert_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
          description: Upsert a template
      security:
      - bearerAuth: []
      tags:
      - template::routes
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
  /api/v1/template/find-all:
    get:
      operationId: find_all
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Template'
                type: array
          description: Find all templates
      security:
      - bearerAuth: []
      tags:
      - template::routes
      x-accepts:
      - application/json
  /api/v1/template/find-by-context:
    get:
      operationId: find_by_context
      parameters:
      - explode: true
        in: query
        name: context
        required: true
        schema:
          $ref: '#/components/schemas/Context'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Template'
                type: array
          description: Find templates by context
      security:
      - bearerAuth: []
      tags:
      - template::routes
      x-accepts:
      - application/json
  /api/v1/template/find-by-ids:
    get:
      operationId: find_by_ids
      parameters:
      - explode: true
        in: query
        name: ids
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Template'
                type: array
          description: Find By ids
      security:
      - bearerAuth: []
      tags:
      - template::routes
      x-accepts:
      - application/json
  /api/v1/template/find-by-type:
    get:
      operationId: find_by_type
      parameters:
      - explode: true
        in: query
        name: template_type
        required: true
        schema:
          $ref: '#/components/schemas/TemplateType'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Template'
                type: array
          description: Find templates by type
      security:
      - bearerAuth: []
      tags:
      - template::routes
      x-accepts:
      - application/json
  /api/v1/template/find-one/{templ_id}:
    get:
      operationId: find_one
      parameters:
      - explode: false
        in: path
        name: templ_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
          description: Find a template by id
      security:
      - bearerAuth: []
      tags:
      - template::routes
      x-accepts:
      - application/json
  /api/v1/template/render:
    post:
      operationId: render
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenderRequest'
        required: true
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                items:
                  format: int32
                  minimum: 0
                  type: integer
                type: array
          description: Render template
      security:
      - bearerAuth: []
      tags:
      - template::routes
      x-content-type: application/json
      x-accepts:
      - application/octet-stream
  /api/v1/template/{id}:
    delete:
      operationId: delete_templ_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Delete a template by id
      security:
      - bearerAuth: []
      tags:
      - template::routes
      x-accepts:
      - application/json
  /api/v1/upload:
    post:
      operationId: upload
      parameters:
      - explode: true
        in: query
        name: correlation_id
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: id
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: is_public
        required: false
        schema:
          nullable: true
          type: boolean
        style: form
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/upsert_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUpload'
          description: Upload a file
      security:
      - bearerAuth: []
      tags:
      - upload::routes
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
  /api/v1/upload/download:
    get:
      operationId: download
      parameters:
      - explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/upsert_request'
          description: Download file
      security:
      - bearerAuth: []
      tags:
      - upload::routes
      x-accepts:
      - application/json
  /api/v1/upload/metadata:
    get:
      operationId: metadata
      parameters:
      - explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUpload'
          description: Get upload metadata
      security:
      - bearerAuth: []
      tags:
      - upload::routes
      x-accepts:
      - application/json
  /api/v1/upload/{id}:
    delete:
      operationId: delete_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Delete a file by id
      security:
      - bearerAuth: []
      tags:
      - upload::routes
      x-accepts:
      - application/json
components:
  schemas:
    Context:
      enum:
      - INVOICE
      type: string
    DownloadFileRequestUriParams:
      properties:
        id:
          type: string
      required:
      - id
    FileUpload:
      example:
        internalName: internalName
        extension: extension
        publicResource: true
        size: 0
        correlationId: correlationId
        thumbnailId: thumbnailId
        _id: _id
        updatedDate: 2000-01-23T04:56:07.000+00:00
        creationDate: 2000-01-23T04:56:07.000+00:00
        contentType: contentType
        originalFilename: originalFilename
      properties:
        _id:
          type: string
        contentType:
          nullable: true
          type: string
        correlationId:
          nullable: true
          type: string
        creationDate:
          format: date-time
          type: string
        extension:
          nullable: true
          type: string
        internalName:
          type: string
        originalFilename:
          type: string
        publicResource:
          type: boolean
        size:
          format: int64
          minimum: 0
          type: integer
        thumbnailId:
          nullable: true
          type: string
        updatedDate:
          format: date-time
          nullable: true
          type: string
      required:
      - _id
      - creationDate
      - internalName
      - originalFilename
      - publicResource
      - size
    RenderRequest:
      example:
        fileName: fileName
        templateContext: INVOICE
        context: ""
        templateId: templateId
      properties:
        context: {}
        fileName:
          type: string
        templateContext:
          $ref: '#/components/schemas/Context'
        templateId:
          type: string
      required:
      - context
      - fileName
      - templateContext
      - templateId
    Template:
      example:
        templateType: HTML
        templateContext: INVOICE
        description: description
        _id: _id
        updatedDate: 2000-01-23T04:56:07.000+00:00
        creationDate: 2000-01-23T04:56:07.000+00:00
        title: title
        fileId: fileId
      properties:
        _id:
          type: string
        creationDate:
          format: date-time
          type: string
        description:
          nullable: true
          type: string
        fileId:
          type: string
        templateContext:
          $ref: '#/components/schemas/Context'
        templateType:
          $ref: '#/components/schemas/TemplateType'
        title:
          type: string
        updatedDate:
          format: date-time
          nullable: true
          type: string
      required:
      - _id
      - creationDate
      - fileId
      - templateContext
      - templateType
      - title
    TemplateType:
      enum:
      - HTML
      type: string
    TemplateUpsert:
      properties:
        _id:
          nullable: true
          type: string
        description:
          nullable: true
          type: string
        templateContext:
          $ref: '#/components/schemas/Context'
        templateType:
          $ref: '#/components/schemas/TemplateType'
        title:
          type: string
      required:
      - templateContext
      - templateType
      - title
    UploadFileRequestUriParams:
      properties:
        correlation_id:
          nullable: true
          type: string
        id:
          nullable: true
          type: string
        is_public:
          nullable: true
          type: boolean
    upsert_request:
      example:
        file_bytes: ""
      properties:
        file_bytes:
          format: binary
          type: string
      required:
      - file_bytes
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http

